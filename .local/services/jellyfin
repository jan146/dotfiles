#!/sbin/openrc-run

name="${RC_SVCNAME}"
supervisor=supervise-daemon
USER=jan
GROUP=jan
COMPOSE_FILE="/var/lib/${RC_SVCNAME}/compose.yaml"

DEVICES_NVIDIA="nvidia.com/gpu=0"
DEVICE_PATH_NONVIDIA="/dev/dri"
# DEVICE_PATH_CARD_NVIDIA="/dev/dri/by-path/pci-0000:01:00.0-card"
# DEVICE_PATH_RENDER_NVIDIA="/dev/dri/by-path/pci-0000:01:00.0-render"
DEVICE_PATH_TARGET="/dev/dri"
CONTAINER_NAME_NONVIDIA=jellyfin
CONTAINER_NAME_NVIDIA=jellyfin_nvidia

export CONTAINER_NAME
export DEVICES
export USER_ID
export GROUP_ID

wait_for_graphical() {

    timeout=30
    start_time=$(date +%s)
    # Wait for Xorg to start
    while ! pgrep -x "Xorg" > /dev/null; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))
        if [ $elapsed_time -ge $timeout ]; then
            return 1
        fi
        sleep 1
    done

    # Wait for /dev/nvidia-uvm to exist if using nvidia
    if [ "$CONTAINER_NAME" = "$CONTAINER_NAME_NVIDIA" ]; then
        while [ ! -e "/dev/nvidia-uvm" ]; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ $elapsed_time -ge $timeout ]; then
                return 1
            fi
            sleep 1
        done
    fi

}

start_pre() {

	# get UID and GID
	USER_ID=$(id -u ${USER})
	GROUP_ID=$(getent group ${GROUP} | cut -d":" -f3)

	# set container name and devices
	if lsmod | grep -q "^nvidia\s"
	then
		CONTAINER_NAME=${CONTAINER_NAME_NVIDIA}
		DEVICES="$DEVICES_NVIDIA"
	else
		CONTAINER_NAME=${CONTAINER_NAME_NONVIDIA}
		DEVICE_PATH_CARD_NONVIDIA=$(readlink -f ${DEVICE_PATH_CARD_NONVIDIA})
		DEVICE_PATH_RENDER_NONVIDIA=$(readlink -f ${DEVICE_PATH_RENDER_NONVIDIA})
		DEVICES="${DEVICE_PATH_NONVIDIA}:${DEVICE_PATH_TARGET}"
	fi
	return 0

}

wait_n_start() {

    # wait for graphical output
    wait_for_graphical
	# Stop podman-compose down from possible previous stop() invocation
	${supervisor} "${RC_SVCNAME}" \
		--stop podman-compose
	# Start podman-compose up
	${supervisor} "${RC_SVCNAME}" \
		--stdout "/var/log/${RC_SVCNAME}/output-up.out" \
		--stderr "/var/log/${RC_SVCNAME}/output-up.err" \
		--user "${USER}" --group "${GROUP}" \
		--start podman-compose -- -f "${COMPOSE_FILE}" up

}

start() {

	ebegin "Starting ${RC_SVCNAME}"
    wait_n_start &
	eend $?

}

stop_pre() {
	start_pre
}

stop() {

	ebegin "Stopping ${RC_SVCNAME}"
	# Stop podman-compose up from previous start() invocation
	${supervisor} "${RC_SVCNAME}" \
		--stop podman-compose
	# Start podman-compose down
	${supervisor} "${RC_SVCNAME}" \
		--stdout "/var/log/${RC_SVCNAME}/output-down.out" \
		--stderr "/var/log/${RC_SVCNAME}/output-down.err" \
		--user "${USER}" --group "${GROUP}" \
		--start podman-compose -- -f "${COMPOSE_FILE}" down -t 0
	eend $?
	
}
