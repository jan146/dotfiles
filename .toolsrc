# vi: syn=sh

# ex - archive extractor
# Usage: ex <file>
ex () {
	if [ -f "$1" ]; then
		case "$1" in
			*.tar.bz2)	tar xjf "$1" ;;
			*.tar.zst)	tar --zstd -xf "$1" ;;
			*.tar.gz)	tar xzf "$1" ;;
			*.tar.xz)	tar xJf "$1" ;;
			*.bz2)		bunzip2 "$1" ;;
			*.rar)		unrar x "$1" ;;
			*.gz)		gunzip "$1" ;;
			*.tar)		tar xf "$1" ;;
			*.tbz2)		tar xjf "$1" ;;
			*.tgz)		tar xzf "$1" ;;
			*.zip)		unzip "$1" ;;
			*.Z)		uncompress "$1" ;;
			*.7z)		7z x "$1" ;;
			*)			echo "$1 cannot be extracted via ex()" ;;
		esac
	else
		echo "$1 is not a valid file"
	fi
}

# set governor for all cpus
setperf ()
{
	if [ -z "$1" ]; then
		echo "performance" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor > /dev/null
	else
		AVAILABLE_GOVERNORS=$(cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors)
		if [ -z "$(echo "$AVAILABLE_GOVERNORS" | grep "$1")" ]; then
			echo "Scaling governor \""$1"\" does not exist"
		else
			echo "$1" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor > /dev/null
			echo "Set scaling governor \""$1"\""
		fi
	fi
}

# print current governors of all cpus
getperf () {
	
	echo "Current scaling governors:"
	cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
	echo ""
	echo "Available scaling governors:"
	cat "/sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors"

}

# get ppid from pid
ppid () { 
	ps -p ${1:-$$} -o ppid= | sed "s/[[:space:]]//g"
}

kill_and_run() {

	while pidof "$1" > /dev/null
	do
		pkill -9 $(pidof "$1")
	done
	/bin/sh -c "$1"

}

# Remove ANSI colors from output
ansi_decolor() {
	sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'
}

env_video() {

	ENV_VIDEO=0
	
	if [ "$XDG_SESSION_TYPE" = "wayland" ]
	then
	
		# Assume nvidia (nouveau) driver
		export MOZ_ENABLE_WAYLAND=1
		export QT_QPA_PLATFORM=wayland
		export XDG_CURRENT_DESKTOP=sway
		LIBVA_DRIVER_NAME=nouveau
		VDPAU_DRIVER=nouveau
	
	elif [ "$XDG_SESSION_TYPE" = "x11" ]
	then
	
		XORG_LOG="$HOME/.local/share/xorg/Xorg.${DISPLAY:1}.log"
		#XORG_LOG="/var/log/Xorg.${DISPLAY:1}.log"
		#XORG_LOG="/var/log/Xorg.0.log"
		export MOZ_X11_EGL=1
		export NVD_BACKEND=direct
	
		# Check which driver Xorg is using (nvidia or intel)
		if grep LoadModule "$XORG_LOG" | grep -q nouveau
		then
			MONITOR=DP-2
			LIBVA_DRIVER_NAME=nouveau
			VDPAU_DRIVER=nouveau
		elif grep LoadModule "$XORG_LOG" | grep -q nvidia
		then
			MONITOR=DP-2
			# LIBVA_DRIVER_NAME=vdpau
			LIBVA_DRIVER_NAME=nvidia
			VDPAU_DRIVER=nvidia
		elif grep LoadModule "$XORG_LOG" | grep -q intel
		then
			MONITOR=HDMI2
			LIBVA_DRIVER_NAME=i965
			# LIBVA_DRIVER_NAME=iHD
			VDPAU_DRIVER=va_gl
		else
			ENV_VIDEO=2	# Failed to find Xorg log
		fi
		export MONITOR
	
	else
		ENV_VIDEO=1	# Something went wrong (other/no graphics driver?)
	fi
	
	export LIBVA_DRIVER_NAME
	export VDPAU_DRIVER
	export ENV_VIDEO

}

